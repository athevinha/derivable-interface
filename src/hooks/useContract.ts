import { ethers } from 'ethers'
import * as WbnbAbi from '../assets/abi/Wbnb.json'
import IERC20ABI from '../assets/abi/IERC20.json'
import BnAAbi from '../assets/abi/BnA.json'
import LogicAbi from '../assets/abi/Logic.json'
import TokensInfoAbi from '../assets/abi/TokensInfo.json'
import RouterAbi from '../assets/abi/Router.json'
import TokenFactoryAbi from '../assets/abi/TokenFactory.json'
import PoolFactoryAbi from '../assets/abi/PoolFactory.json'
import PoolAbi from '../assets/abi/Pool.json'
import { useConfigs } from '../state/config/useConfigs'
import { JsonRpcProvider } from '@ethersproject/providers'
import { overrideContract } from '../utils/helpers'

export const useContract = () => {
  const { configs } = useConfigs()
  const getContract = (
    abi: any,
    address: string,
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    console.log('configs.rpcUrl', configs.rpcUrl)
    const signerOrProvider = signer || new JsonRpcProvider(configs.rpcUrl)
    return new ethers.Contract(address, abi, signerOrProvider)
  }

  const getERC20Contract = (
    address: string,
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(IERC20ABI, address, signer)
  }

  const getWbnbContract = (
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(WbnbAbi, configs.addresses.wrapToken, signer)
  }

  const getBnAContract = () => {
    const provider1 = new JsonRpcProvider(configs.rpcUrl)
    const address = overrideContract(
      provider1,
      '0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a8d2510414610030575b600080fd5b61004a600480360381019061004591906104bc565b610061565b604051610058929190610647565b60405180910390f35b6060600083839050600161007591906106a6565b868690508989905061008791906106fc565b61009191906106fc565b67ffffffffffffffff8111156100aa576100a9610756565b5b6040519080825280602002602001820160405280156100d85781602001602082028036833780820191505090505b5091506000805b8989905081101561043d5760008a8a838181106100ff576100fe610785565b5b90506020020160208101906101149190610812565b905060005b8989905081101561042a5760008a8a8381811061013957610138610785565b5b905060200201602081019061014e9190610812565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156101f2578073ffffffffffffffffffffffffffffffffffffffff16318786815181106101c3576101c2610785565b5b6020026020010181815250508888905060016101df91906106a6565b856101ea91906106a6565b945050610419565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231826040518263ffffffff1660e01b815260040161022b919061084e565b60206040518083038186803b15801561024357600080fd5b505afa92505050801561027457506040513d601f19601f820116820180604052508101906102719190610895565b60015b6102b0573d80600081146102a4576040519150601f19603f3d011682016040523d82523d6000602084013e6102a9565b606091505b50506102d2565b808887815181106102c4576102c3610785565b5b602002602001018181525050505b84806102dd906108c2565b95505060005b89899050811015610416578373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e838c8c8581811061031e5761031d610785565b5b90506020020160208101906103339190610812565b6040518363ffffffff1660e01b815260040161035092919061090b565b60206040518083038186803b15801561036857600080fd5b505afa92505050801561039957506040513d601f19601f820116820180604052508101906103969190610895565b60015b6103d5573d80600081146103c9576040519150601f19603f3d011682016040523d82523d6000602084013e6103ce565b606091505b50506103f7565b808988815181106103e9576103e8610785565b5b602002602001018181525050505b8580610402906108c2565b9650508061040f906108c2565b90506102e3565b50505b80610423906108c2565b9050610119565b505080610436906108c2565b90506100df565b5043915050965096945050505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261047c5761047b610457565b5b8235905067ffffffffffffffff8111156104995761049861045c565b5b6020830191508360208202830111156104b5576104b4610461565b5b9250929050565b600080600080600080606087890312156104d9576104d861044d565b5b600087013567ffffffffffffffff8111156104f7576104f6610452565b5b61050389828a01610466565b9650965050602087013567ffffffffffffffff81111561052657610525610452565b5b61053289828a01610466565b9450945050604087013567ffffffffffffffff81111561055557610554610452565b5b61056189828a01610466565b92509250509295509295509295565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6105af8161059c565b82525050565b60006105c183836105a6565b60208301905092915050565b6000602082019050919050565b60006105e582610570565b6105ef818561057b565b93506105fa8361058c565b8060005b8381101561062b57815161061288826105b5565b975061061d836105cd565b9250506001810190506105fe565b5085935050505092915050565b6106418161059c565b82525050565b6000604082019050818103600083015261066181856105da565b90506106706020830184610638565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106b18261059c565b91506106bc8361059c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106f1576106f0610677565b5b828201905092915050565b60006107078261059c565b91506107128361059c565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561074b5761074a610677565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107df826107b4565b9050919050565b6107ef816107d4565b81146107fa57600080fd5b50565b60008135905061080c816107e6565b92915050565b6000602082840312156108285761082761044d565b5b6000610836848285016107fd565b91505092915050565b610848816107d4565b82525050565b6000602082019050610863600083018461083f565b92915050565b6108728161059c565b811461087d57600080fd5b50565b60008151905061088f81610869565b92915050565b6000602082840312156108ab576108aa61044d565b5b60006108b984828501610880565b91505092915050565b60006108cd8261059c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610900576108ff610677565b5b600182019050919050565b6000604082019050610920600083018561083f565b61092d602083018461083f565b939250505056fea2646970667358221220a71587403b5de1e75d15fb5a94cadd8aa0c5f201e21708e739d8613f9db23cf864736f6c63430008090033'
    )
    return new ethers.Contract(address, BnAAbi, provider1)
  }

  const getTokenInfoContract = () => {
    const provider1 = new JsonRpcProvider(configs.rpcUrl)
    const address = overrideContract(
      provider1,
      '0x608060405234801561001057600080fd5b506004361061002b5760003560e01c80634a69ac5014610030575b600080fd5b61004a600480360381019061004591906107b2565b610060565b60405161005791906109f9565b60405180910390f35b60608282905067ffffffffffffffff81111561007f5761007e610a1b565b5b6040519080825280602002602001820160405280156100b857816020015b6100a561070e565b81526020019060019003908161009d5790505b50905060005b8383905081101561044d5760008484838181106100de576100dd610a4a565b5b90506020020160208101906100f39190610ad7565b90508073ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b15801561013b57600080fd5b505afa92505050801561017157506040513d6000823e3d601f19601f8201168201806040525081019061016e9190610bf6565b60015b6102275761017d610c4c565b806308c379a014156101ad5750610192610c6e565b8061019d57506101af565b6101a78282610454565b50610222565b505b3d80600081146101db576040519150601f19603f3d011682016040523d82523d6000602084013e6101e0565b606091505b50610220826040518060400160405280600b81526020017f286e6f20726561736f6e29000000000000000000000000000000000000000000815250610454565b505b61024c565b8084848151811061023b5761023a610a4a565b5b602002602001015160000181905250505b8073ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561029257600080fd5b505afa1580156102a6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102cf9190610bf6565b8383815181106102e2576102e1610a4a565b5b6020026020010151602001819052508073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561033757600080fd5b505afa15801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f9190610d30565b83838151811061038257610381610a4a565b5b60200260200101516040019060ff16908160ff16815250508073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103e057600080fd5b505afa1580156103f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104189190610d89565b83838151811061042b5761042a610a4a565b5b60200260200101516060018181525050508061044690610de5565b90506100be565b5092915050565b6104758273ffffffffffffffffffffffffffffffffffffffff1660146104d2565b81604051602001610487929190610eb6565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c99190610f2f565b60405180910390fd5b6060600060028360026104e59190610f51565b6104ef9190610fab565b67ffffffffffffffff81111561050857610507610a1b565b5b6040519080825280601f01601f19166020018201604052801561053a5781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061057257610571610a4a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106105d6576105d5610a4a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026106169190610f51565b6106209190610fab565b90505b60018111156106c0577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061066257610661610a4a565b5b1a60f81b82828151811061067957610678610a4a565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c9450806106b990611001565b9050610623565b5060008414610704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fb90611077565b60405180910390fd5b8091505092915050565b60405180608001604052806060815260200160608152602001600060ff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126107725761077161074d565b5b8235905067ffffffffffffffff81111561078f5761078e610752565b5b6020830191508360208202830111156107ab576107aa610757565b5b9250929050565b600080602083850312156107c9576107c8610743565b5b600083013567ffffffffffffffff8111156107e7576107e6610748565b5b6107f38582860161075c565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561086557808201518184015260208101905061084a565b83811115610874576000848401525b50505050565b6000601f19601f8301169050919050565b60006108968261082b565b6108a08185610836565b93506108b0818560208601610847565b6108b98161087a565b840191505092915050565b600060ff82169050919050565b6108da816108c4565b82525050565b6000819050919050565b6108f3816108e0565b82525050565b60006080830160008301518482036000860152610916828261088b565b91505060208301518482036020860152610930828261088b565b915050604083015161094560408601826108d1565b50606083015161095860608601826108ea565b508091505092915050565b600061096f83836108f9565b905092915050565b6000602082019050919050565b600061098f826107ff565b610999818561080a565b9350836020820285016109ab8561081b565b8060005b858110156109e757848403895281516109c88582610963565b94506109d383610977565b925060208a019950506001810190506109af565b50829750879550505050505092915050565b60006020820190508181036000830152610a138184610984565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aa482610a79565b9050919050565b610ab481610a99565b8114610abf57600080fd5b50565b600081359050610ad181610aab565b92915050565b600060208284031215610aed57610aec610743565b5b6000610afb84828501610ac2565b91505092915050565b600080fd5b610b128261087a565b810181811067ffffffffffffffff82111715610b3157610b30610a1b565b5b80604052505050565b6000610b44610739565b9050610b508282610b09565b919050565b600067ffffffffffffffff821115610b7057610b6f610a1b565b5b610b798261087a565b9050602081019050919050565b6000610b99610b9484610b55565b610b3a565b905082815260208101848484011115610bb557610bb4610b04565b5b610bc0848285610847565b509392505050565b600082601f830112610bdd57610bdc61074d565b5b8151610bed848260208601610b86565b91505092915050565b600060208284031215610c0c57610c0b610743565b5b600082015167ffffffffffffffff811115610c2a57610c29610748565b5b610c3684828501610bc8565b91505092915050565b60008160e01c9050919050565b600060033d1115610c6b5760046000803e610c68600051610c3f565b90505b90565b600060443d1015610c7e57610d01565b610c86610739565b60043d036004823e80513d602482011167ffffffffffffffff82111715610cae575050610d01565b808201805167ffffffffffffffff811115610ccc5750505050610d01565b80602083010160043d038501811115610ce9575050505050610d01565b610cf882602001850186610b09565b82955050505050505b90565b610d0d816108c4565b8114610d1857600080fd5b50565b600081519050610d2a81610d04565b92915050565b600060208284031215610d4657610d45610743565b5b6000610d5484828501610d1b565b91505092915050565b610d66816108e0565b8114610d7157600080fd5b50565b600081519050610d8381610d5d565b92915050565b600060208284031215610d9f57610d9e610743565b5b6000610dad84828501610d74565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610df0826108e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2357610e22610db6565b5b600182019050919050565b600081905092915050565b6000610e448261082b565b610e4e8185610e2e565b9350610e5e818560208601610847565b80840191505092915050565b7f3a20000000000000000000000000000000000000000000000000000000000000600082015250565b6000610ea0600283610e2e565b9150610eab82610e6a565b600282019050919050565b6000610ec28285610e39565b9150610ecd82610e93565b9150610ed98284610e39565b91508190509392505050565b600082825260208201905092915050565b6000610f018261082b565b610f0b8185610ee5565b9350610f1b818560208601610847565b610f248161087a565b840191505092915050565b60006020820190508181036000830152610f498184610ef6565b905092915050565b6000610f5c826108e0565b9150610f67836108e0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fa057610f9f610db6565b5b828202905092915050565b6000610fb6826108e0565b9150610fc1836108e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ff657610ff5610db6565b5b828201905092915050565b600061100c826108e0565b915060008214156110205761101f610db6565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b6000611061602083610ee5565b915061106c8261102b565b602082019050919050565b6000602082019050818103600083015261109081611054565b905091905056fea26469706673582212200484a8f27f20bfb562e1f8ca5325dc55fb50d541c9ba2d8201147a940ceed96964736f6c63430008090033'
    )
    return new ethers.Contract(address, TokensInfoAbi, provider1)
  }

  const getRouterContract = (
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(RouterAbi, configs.addresses.router, signer)
  }

  const getTokenFactoryContract = (
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(TokenFactoryAbi, configs.addresses.tokenFactory, signer)
  }

  const getPoolFactoryContract = (
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(PoolFactoryAbi, configs.addresses.poolFactory, signer)
  }

  const getPoolContract = (
    poolAddress: string,
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(PoolAbi, poolAddress, signer)
  }

  const getLogicContract = (
    logicAddress: string,
    signer?: ethers.Signer | ethers.providers.Provider
  ) => {
    return getContract(LogicAbi, logicAddress, signer)
  }

  return {
    getTokenInfoContract,
    getBnAContract,
    getLogicContract,
    getWbnbContract,
    getERC20Contract,
    getRouterContract,
    getTokenFactoryContract,
    getPoolFactoryContract,
    getPoolContract
  }
}
